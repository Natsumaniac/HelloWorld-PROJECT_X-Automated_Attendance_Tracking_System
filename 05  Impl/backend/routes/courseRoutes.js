const express = require('express');
const router = express.Router();
const Course = require('../models/Course');
const Student = require('../models/Student');
const Instructor = require('../models/Instructor');
const { adminAuth } = require('../middleware/adminAuth');

// Get available courses for students (public)
router.get('/available', async (req, res) => {
    try {
        const courses = await Course.find();
        const formattedCourses = courses.map(course => ({
            _id: course._id,
            courseCode: course.courseCode,
            courseName: course.courseName,
            instructor: course.instructor,
            totalStudents: course.students ? course.students.length : 0
        }));
        res.json(formattedCourses);
    } catch (error) {
        console.error('Error fetching available courses:', error);
        res.status(500).json({ message: error.message });
    }
});

// Get all courses (admin only)
router.get('/', adminAuth, async (req, res) => {
    try {
        const courses = await Course.find();
        const formattedCourses = courses.map(course => ({
            _id: course._id,
            courseCode: course.courseCode,
            courseTitle: course.courseTitle, // use courseTitle, not courseName
            faculty: course.faculty,         // <-- add this
            program: course.program,         // <-- add this
            yearLevel: course.yearLevel,     // optional, for display
            yearSection: course.yearSection, // optional, for display
            instructorId: course.instructorId, // for assignment
            classroom: course.classroom || '',
            enrollmentCode: course.enrollmentCode,
            students: course.students || [],
            totalStudents: course.students ? course.students.length : 0
        }));
        res.json(formattedCourses);
    } catch (error) {
        console.error('Error fetching all courses:', error);
        res.status(500).json({ message: error.message });
    }
});

// Create a new course (admin only)
router.post('/', adminAuth, async (req, res) => {
    const course = new Course({
        courseCode: req.body.courseCode,
        courseName: req.body.courseName,
        instructor: req.body.instructor,
        classroom: req.body.classroom, // <-- changed from room to classroom
        program: req.body.program,
        yearSection: req.body.yearSection,
        schedules: req.body.schedules || []
    });

    try {
        const newCourse = await course.save();
        res.status(201).json(newCourse);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// POST /api/courses/create
router.post('/create', adminAuth, async (req, res) => {
  try {
    const {
      faculty,
      program,
      courseCode,
      courseTitle,
      yearLevel,
      yearSection,
      schedules,
      instructorId,
      classroom
    } = req.body;

    const course = new Course({
      faculty,
      program,
      courseCode,
      courseTitle,
      yearLevel,
      yearSection,
      schedules,
      instructorId,
      classroom
      // Do NOT include enrollmentCode or attendanceCode here;
      // they are auto-generated by the Course model.
    });

    await course.save();
    res.status(201).json({ message: 'Course registered!', course });
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Get courses for a specific instructor (public)
router.get('/instructor/:instructorId', async (req, res) => {
    try {
        const instructorId = req.params.instructorId;

        // Find courses where instructorId matches
        const courses = await Course.find({ instructorId: instructorId });

        if (!courses || courses.length === 0) {
            return res.json([]);
        }

        // Map courses and add student count
        const coursesWithCount = courses.map(course => ({
            _id: course._id,
            courseCode: course.courseCode,
            courseName: course.courseName,
            enrollmentCode: course.enrollmentCode,
            instructorId: course.instructorId,
            totalStudents: course.students ? course.students.length : 0
        }));

        res.json(coursesWithCount);
    } catch (error) {
        console.error('Error fetching courses:', error);
        res.status(500).json({ message: 'Error fetching courses' });
    }
});

// Get course details with enrolled students (public)
router.get('/:id', async (req, res) => {
    try {
        const course = await Course.findById(req.params.id);
        if (!course) {
            return res.status(404).json({ message: 'Course not found' });
        }

        // Find all students by their ID numbers
        const students = await Student.find({ idNumber: { $in: course.students } });
        
        // Format the response
        const formattedCourse = {
            ...course.toObject(),
            students: students.map(student => ({
                idNumber: student.idNumber,
                fullName: student.fullName
            }))
        };

        res.json(formattedCourse);
    } catch (error) {
        res.status(404).json({ message: error.message });
    }
});

// Get enrolled students for a course (public)
router.get('/:id/students', async (req, res) => {
    try {
        const course = await Course.findById(req.params.id);
        if (!course) {
            return res.status(404).json({ message: 'Course not found' });
        }

        const students = await Student.find({
            idNumber: { $in: course.students }
        });

        res.json(students);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Enroll a student in a course (admin only)
router.post('/enroll', async (req, res) => {
  try {
    const { studentId, courseId } = req.body;
    if (!studentId || !courseId) {
      return res.status(400).json({ message: 'Student ID and Course ID are required.' });
    }

    // Find the course
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: 'Course not found.' });
    }

    // Prevent duplicate enrollment
    if (course.students.includes(studentId)) {
      return res.status(400).json({ message: 'Student already enrolled in this course.' });
    }

    // Add student to course
    course.students.push(studentId); // studentId should be a string like "2021-3471"
    await course.save();

    res.json({ message: 'Student enrolled successfully!', course });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Remove a student from a course (admin only)
router.delete('/:courseId/students/:studentId', adminAuth, async (req, res) => {
    try {
        const { courseId, studentId } = req.params;
        
        const course = await Course.findById(courseId);
        if (!course) {
            return res.status(404).json({ message: 'Course not found' });
        }

        // Check if student is enrolled using ID number
        if (!course.students.includes(studentId)) {
            return res.status(400).json({ message: 'Student is not enrolled in this course' });
        }

        // Remove student using ID number
        course.students = course.students.filter(id => id !== studentId);
        await course.save();

        res.json({ message: 'Student removed successfully' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Update a course (admin only)
router.put('/update/:id', adminAuth, async (req, res) => {
    try {
        const course = await Course.findById(req.params.id);
        if (!course) {
            return res.status(404).json({ message: 'Course not found' });
        }

        const { courseCode, courseName, instructor, classroom, program, yearSection, schedules } = req.body;

        if (courseCode) course.courseCode = courseCode;
        if (courseName) course.courseName = courseName;
        if (instructor) course.instructor = instructor;
        if (classroom !== undefined) course.classroom = classroom; // <-- use classroom
        if (program !== undefined) course.program = program;
        if (yearSection !== undefined) course.yearSection = yearSection;
        if (schedules) course.schedules = schedules;

        const updatedCourse = await course.save();
        res.json({
            message: 'Course updated successfully',
            course: {
                _id: updatedCourse._id,
                courseCode: updatedCourse.courseCode,
                courseName: updatedCourse.courseName,
                instructor: updatedCourse.instructor,
                classroom: updatedCourse.classroom, // <-- use classroom
                program: updatedCourse.program,
                yearSection: updatedCourse.yearSection,
                schedules: updatedCourse.schedules,
                enrollmentCode: updatedCourse.enrollmentCode
            }
        });
    } catch (error) {
        res.status(400).json({ 
            message: error.message,
            details: error.errors ? Object.values(error.errors).map(err => err.message) : undefined
        });
    }
});

// Delete a course (admin only)
router.delete('/delete/:id', adminAuth, async (req, res) => {
    try {
        const course = await Course.findById(req.params.id);
        if (!course) {
            return res.status(404).json({ message: 'Course not found' });
        }

        await course.deleteOne();
        res.json({ message: 'Course deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Get all courses (for testing)
router.get('/test/all', adminAuth, async (req, res) => {
    try {
        const courses = await Course.find().populate('students', 'idNumber fullName');
        res.json({
            total: courses.length,
            courses: courses.map(course => ({
                _id: course._id,
                courseCode: course.courseCode,
                courseName: course.courseName,
                instructor: course.instructor,
                enrollmentCode: course.enrollmentCode,
                totalStudents: course.students.length
            }))
        });
    } catch (error) {
        console.error('Error fetching all courses:', error);
        res.status(500).json({ message: 'Error fetching courses' });
    }
});

// Debug route to check all courses
router.get('/debug/all', adminAuth, async (req, res) => {
    try {
        const courses = await Course.find();
    
        res.json({
            total: courses.length,
            courses: courses.map(course => ({
                _id: course._id,
                courseCode: course.courseCode,
                courseName: course.courseName,
                instructor: course.instructor,
                enrollmentCode: course.enrollmentCode
            }))
        });
    } catch (error) {
        console.error('Debug route error:', error);
        res.status(500).json({ message: 'Error fetching courses' });
    }
});

// Update instructor IDs for existing courses
router.post('/update-instructor-ids', adminAuth, async (req, res) => {
    try {
        const { instructorName, instructorId } = req.body;
        
        // Update all courses where instructor matches the name
        const result = await Course.updateMany(
            { instructor: instructorName },
            { $set: { instructor: instructorId } }
        );

        res.json({
            message: 'Courses updated successfully',
            matchedCount: result.matchedCount,
            modifiedCount: result.modifiedCount
        });
    } catch (error) {
        console.error('Error updating instructor IDs:', error);
        res.status(500).json({ message: 'Error updating courses' });
    }
});

// Verify a course enrollment code (public)
router.post('/verify-code', async (req, res) => {
    try {
        const { courseId, enrollmentCode } = req.body;
        
        // Validate input
        if (!courseId || !enrollmentCode) {
            return res.status(400).json({
                success: false,
                message: 'Course ID and enrollment code are required'
            });
        }
        
        // Find the course
        const course = await Course.findById(courseId);
        if (!course) {
            return res.status(404).json({
                success: false,
                message: 'Course not found'
            });
        }
        
        // Check if the enrollment code matches
        const isCodeValid = course.enrollmentCode === enrollmentCode;
        
        if (isCodeValid) {
            return res.json({
                success: true,
                message: 'Enrollment code is valid'
            });
        } else {
            return res.status(400).json({
                success: false,
                message: 'Invalid enrollment code'
            });
        }
    } catch (error) {
        console.error('Error verifying enrollment code:', error);
        res.status(500).json({
            success: false,
            message: 'Error verifying enrollment code'
        });
    }
});

// Generate a new attendance code for manual attendance
router.post('/:courseId/generate-attendance-code', async (req, res) => {
    try {
        const { courseId } = req.params;
        
        // Find the course
        const course = await Course.findById(courseId);
        if (!course) {
            return res.status(404).json({ 
                success: false,
                message: 'Course not found' 
            });
        }
        
        // Generate a new 6-digit attendance code
        const newCode = Math.floor(100000 + Math.random() * 900000).toString();
        
        // Update the course with the new code
        course.attendanceCode = newCode;
        await course.save();
        
        res.json({
            success: true,
            message: 'New attendance code generated',
            attendanceCode: newCode
        });
    } catch (error) {
        console.error('Error generating attendance code:', error);
        res.status(500).json({ 
            success: false,
            message: error.message 
        });
    }
});

// Assign a course to an instructor (admin only)
router.post('/assign-course', adminAuth, async (req, res) => {
  try {
    const { instructorId, courseId } = req.body;
    console.log('Received instructorId:', instructorId); // <-- Add this line
    if (!instructorId || !courseId) {
      return res.status(400).json({ message: 'Instructor ID and Course ID are required.' });
    }

    // Find the instructor by _id and get their idNumber
    const instructor = await Instructor.findById(instructorId);
    if (!instructor) {
      return res.status(404).json({ message: 'Instructor not found.' });
    }

    // Update the course's instructorId field to use idNumber
    await Course.findByIdAndUpdate(
      courseId,
      { instructorId: instructor.idNumber }, // <-- use idNumber!
      { new: true }
    );

    res.json({ message: 'Course assigned to instructor successfully.' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get enrolled courses for a student (public)
router.get('/enrolled-courses/:studentId', async (req, res) => {
    try {
        const studentId = req.params.studentId;

        // Find the student by ID
        const student = await Student.findOne({ idNumber: studentId });
        if (!student) {
            return res.status(404).json({ message: 'Student not found' });
        }

        // Find courses where the student is enrolled
        const courses = await Course.find({ students: studentId });

        // Format the response
        const formattedCourses = await Promise.all(courses.map(async course => {
            let instructorName = '';
            try {
              const instructorModel = require('../models/Instructor');
              const instructorDoc = await instructorModel.findOne({ idNumber: course.instructorId });
              const instructorName = instructorDoc ? instructorDoc.fullName : 'Unknown';
            } catch (err) {
            }

            // Fetch attendance records for the student in this course
            let attendanceRecords = [];
            try {
              const Attendance = require('../models/Attendance');
              attendanceRecords = await Attendance.find({ 
                courseId: course._id, 
                studentId: studentId 
              });
            } catch (err) {
            }

            return {
              id: course._id,
              courseCode: course.courseCode,
              courseName: course.courseName,
              instructor: instructorName,
              section: course.yearSection || 'N/A',
              schedule: course.schedules && course.schedules.length > 0
                ? course.schedules.map(s => `${s.day} ${s.startTime}-${s.endTime}`).join(', ')
                : 'Schedule not set',
              room: course.classroom || 'Room not set',
              attendance: attendanceRecords.map(record => ({
                status: record.status,
                date: record.date
              }))
            };
        }));

        res.json(formattedCourses);
    } catch (error) {
        console.error('Error fetching enrolled courses:', error);
        res.status(500).json({ message: 'Error fetching enrolled courses' });
    }
});

module.exports = router;